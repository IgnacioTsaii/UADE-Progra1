"""
Escribir un programa para rellenar e imprimir una matriz de enteros de N x N con los números del 1 al 4, respetando el patrón por cuadrantes detallado más abajo. El programa debe servir para cualquier valor par de N, el que se ingresa por teclado.

1 1 1 1 2 2 2 2
1 1 1 1 2 2 2 2
1 1 1 1 2 2 2 2
1 1 1 1 2 2 2 2
3 3 3 3 4 4 4 4
3 3 3 3 4 4 4 4
3 3 3 3 4 4 4 4
3 3 3 3 4 4 4 4
"""

import timeit  # Esto se usa para poder medir cuánto tiempo demora cada estrategia

def rellenarmatriz1(m):
    n = len(m)
    mitad = n // 2
    for f in range(n):
        for c in range(n):
            if f<mitad and c<mitad:
                relleno = 1
            elif f<mitad and c>=mitad:
                relleno = 2
            elif f>=mitad and c<mitad:
                relleno = 3
            else:
                relleno = 4
            m[f][c] = relleno

def rellenarmatriz2(m):
    n = len(m)
    mitad = n // 2
    for f in range(mitad):
        for c in range(mitad):
            # Primer cuadrante
            m[f][c] = 1
            # Segundo cuadrante
            m[f][c+mitad] = 2
            # Tercer cuadrante
            m[f+mitad][c] = 3
            # Cuarto cuadrante
            m[f+mitad][c+mitad] = 4

def imprimirmatriz(m):
    for f in m:
        for c in f:
            print("%3d" %c, end="")
        print()
        
n = int(input("Tamaño de la matriz? "))
while n<=0 or n%2!=0:
    print("El tamaño debe ser par y mayor que 0")
    n = int(input("Tamaño de la matriz? "))
mat = [[0] * n for i in range(n)]
start_time = timeit.default_timer()
rellenarmatriz1(mat)
end_time  = timeit.default_timer()
imprimirmatriz(mat)
print("Tiempo empleado: %.8f segundos" %(end_time - start_time))
print()
# Borramos la matriz anterior para usar una nueva estrategia de relleno
del mat
mat = [[0] * n for i in range(n)]
start_time = timeit.default_timer()
rellenarmatriz2(mat)
end_time  = timeit.default_timer()
imprimirmatriz(mat)
print("Tiempo empleado: %.8f segundos" %(end_time - start_time))
